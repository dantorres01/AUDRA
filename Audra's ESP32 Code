// ESP32 AUDRA CODE

#define BLYNK_TEMPLATE_ID "TMPL2LR6_I4_c"
#define BLYNK_TEMPLATE_NAME "AUDRA"
#define BLYNK_FIRMWARE_VERSION "0.1.0"
#define BLYNK_PRINT Serial

#include "BlynkEdgent.h"
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <DHT.h>

// Definir los pines I2C para el BME280
#define I2C_SDA 21
#define I2C_SCL 22-
#define SEALEVELPRESSURE_HPA (1013.25)

// Definir el pin para el sensor DHT11
#define DHT_PIN 23
#define DHT_TYPE DHT11
DHT dht(DHT_PIN, DHT_TYPE);

// Crear una instancia del sensor BME280
Adafruit_BME280 bme;

// Definir el pin para el sensor MQ-2 (ejemplo usando pin 36)
#define MQ2_PIN 32
int gasValue = 0;
float gasConcentration = 0.0;
int baseline = 0;

// Definir el pin para el sensor de humedad del suelo (ejemplo usando pin A0)
#define SOIL_MOISTURE_PIN 33
int soilMoistureValue = 0;
float soilMoisturePercent = 0.0;  // Variable para almacenar el porcentaje de humedad del suelo

// Función para escanear el bus I2C
void scanI2C() {
  byte error, address;
  int nDevices;

  Serial.println("Escaneando I2C...");
  nDevices = 0;

  for (address = 1; address < 127; address++) {
    Wire.beginTransmission(address);
    error = Wire.endTransmission();

    if (error == 0) {
      Serial.print("Dispositivo I2C encontrado en la dirección 0x");
      if (address < 16)
        Serial.print("0");
      Serial.print(address, HEX);
      Serial.println(" !");

      nDevices++;
    } else if (error == 4) {
      Serial.print("Error desconocido en la dirección 0x");
      if (address < 16)
        Serial.print("0");
      Serial.println(address, HEX);
    }
  }

  if (nDevices == 0)
    Serial.println("No se encontraron dispositivos I2C\n");
  else
    Serial.println("Escaneo I2C completado\n");
}

void setup() {
  // Inicializa la comunicación serial
  Serial.begin(115200);
  delay(100);
  BlynkEdgent.begin();
  
  // Inicializa la comunicación I2C con los pines especificados
  Wire.begin(I2C_SDA, I2C_SCL);

  // Inicializa el sensor DHT11
  dht.begin();

  // Inicializa el sensor MQ-2
  pinMode(MQ2_PIN, INPUT);

  // Ejecuta el escáner I2C
  scanI2C();

  // Inicializa el sensor BME280
  if (!bme.begin(0x76)) {
    Serial.println("No se encontró el sensor BME280 en 0x76. Verifica la conexión.");
    if (!bme.begin(0x77)) {
      Serial.println("No se encontró el sensor BME280 en 0x77. Verifica la conexión.");
      while (1);
    }
  }

  // Calibración inicial del MQ-2 (lectura en aire limpio)
  Serial.println("Calibrando sensor MQ-2...");
  delay(10000); // Esperar 10 segundos
  baseline = analogRead(MQ2_PIN);
  Serial.print("Valor de referencia en aire limpio: ");
  Serial.println(baseline);
}

void loop() {
  // Maneja las tareas de Blynk
  BlynkEdgent.run();
  
  // Lee los valores del sensor BME280
  float temperature_bme = bme.readTemperature();
  float humidity_bme = bme.readHumidity();
  float pressure_bme = bme.readPressure() / 100.0F;

  // Lee los valores del sensor DHT11
  float temperature_dht = dht.readTemperature();
  float humidity_dht = dht.readHumidity();

  // Lee el valor del sensor MQ-2
  gasValue = analogRead(MQ2_PIN);

  // Lee el valor del sensor de humedad del suelo
  soilMoistureValue = analogRead(SOIL_MOISTURE_PIN);

  // Convierte el valor del sensor de humedad del suelo a porcentaje
  soilMoisturePercent = map(soilMoistureValue, 4095, 1650, 0, 100);

  // Calcula la concentración de gas relativa a la calibración inicial
  gasConcentration = ((float)gasValue / baseline) * 10.4;

  // Imprime los valores en el monitor serial
  Serial.print("BME280 - Temperatura: ");
  Serial.print(temperature_bme);
  Serial.print(" °C, Humedad: ");
  Serial.print(humidity_bme);
  Serial.print(" %, Presión: ");
  Serial.print(pressure_bme);
  Serial.println(" hPa");

  Serial.print("DHT11 - Temperatura: ");
  Serial.print(temperature_dht);
  Serial.print(" °C, Humedad: ");
  Serial.print(humidity_dht);
  Serial.println(" %");

  Serial.print("MQ-2 - Valor de gas: ");
  Serial.print(gasValue);
  Serial.print(", Concentración de gas: ");
  Serial.print(gasConcentration);
  Serial.println(" %");

  Serial.print("Humedad del suelo - Valor: ");
  Serial.print(soilMoistureValue);
  Serial.print(", Porcentaje: ");
  Serial.println(soilMoisturePercent);

  // Envia los valores a Blynk
  Blynk.virtualWrite(V0, temperature_bme);
  Blynk.virtualWrite(V1, humidity_bme);
  Blynk.virtualWrite(V2, pressure_bme);
  Blynk.virtualWrite(V3, temperature_dht);
  Blynk.virtualWrite(V4, humidity_dht);
  Blynk.virtualWrite(V5, gasConcentration);
  Blynk.virtualWrite(V6, soilMoisturePercent);

  // Espera 2 segundos antes de leer los valores nuevamente
  delay(2000);
}
